[package]
name = "examples"
version = "0.1.0"
authors = ["bjoernQ <bjoern.quentin@mobile-j.de>"]
edition = "2021"
license = "MIT OR Apache-2.0"
rust-version = "1.82"

[profile.release]
debug = true
lto = "fat"
opt-level = "s"


[profile.release.package.esp-wifi]
opt-level = 3

[profile.dev]
debug = true
lto = "fat"
opt-level = "z"

[profile.dev.package.esp-wifi]
opt-level = 3

[dependencies]
esp-hal = { version = "0.22.0", optional = true }
esp-backtrace = { version = "0.14.0", optional = true, features = [
    "panic-handler",
    "println",
    "exception-handler",
] }
esp-println = { version = "0.12.0", optional = true, features = ["log"] }
esp-hal-embassy = { version = "0.5.0", optional = true }

embassy-time = { version = "0.3.0", optional = true }
embassy-executor = { version = "0.6", package = "embassy-executor", features = [
    "nightly",
    "integrated-timers",
], optional = true }
embassy-net = { version = "0.5.0", features = [
    "tcp",
    "udp",
    "dhcpv4",
    "medium-ethernet",
], optional = true }

esp-wifi = { version = "0.11.0", optional = true, features = ["sys-logs", "utils", "wifi"] }
blocking-network-stack = { git = "https://github.com/bjoernQ/blocking-network-stack", rev = "1c581661d78e0cf0f17b936297179b993fb149d7" }
smoltcp11 = { package = "smoltcp", version = "0.11.0", optional = true, default-features = false, features = [
    "proto-ipv4",
    "socket-tcp",
    "socket-icmp",
    "socket-udp",
    "medium-ethernet",
    "proto-dhcpv4",
    "socket-raw",
    "socket-dhcpv4",
] }
smoltcp = { version = "0.12.0", optional = true, default-features = false, features = [
    "proto-ipv4",
    "socket-tcp",
    "socket-icmp",
    "socket-udp",
    "medium-ethernet",
    "proto-dhcpv4",
    "socket-raw",
    "socket-dhcpv4",
] }
log = "0.4.16"
embedded-io = "0.6.1"
embedded-io-async = "0.6.0"
heapless = "0.8.0"
critical-section = "1.0.1"
static_cell = { version = "2.1", features = ["nightly"] }

esp-mbedtls = { path = "./esp-mbedtls" }

edge-http = { version = "0.4.0", optional = true }
edge-nal = { version = "0.4.0", optional = true }
edge-nal-embassy = { version = "0.4.0", optional = true }
cfg-if = "1.0.0"
esp-alloc = { version = "0.5.0", optional = true}
enumset = { version = "1", default-features = false }

[target.'cfg(target_os = "espidf")'.dependencies]
esp-idf-svc = { version = "0.50", features = ["binstart"] }

[[example]]
name = "crypto_self_test"
required-features = ["examples"]

[[example]]
name = "crypto_self_test_std"

[[example]]
name = "async_client"
required-features = ["examples-async"]

[[example]]
name = "async_client_mTLS"
required-features = ["examples-async"]

[[example]]
name = "async_server"
required-features = ["examples-async"]

[[example]]
name = "async_server_mTLS"
required-features = ["examples-async"]

[[example]]
name = "edge_server"
required-features = ["examples-async", "edge-http"]

[features]
examples = ["esp-hal", "esp-backtrace", "esp-println", "esp-wifi", "smoltcp", "smoltcp11", "esp-alloc"]
examples-async = ["examples", "esp-hal-embassy", "embassy-time", "embassy-executor", "embassy-net", "edge-http", "edge-nal", "edge-nal-embassy", "esp-mbedtls/async", "esp-mbedtls/edge-nal"]
examples-std = ["critical-section/std"]

esp32 = [
    "esp-hal?/esp32",
    "esp-hal-embassy?/esp32",
    "esp-backtrace?/esp32",
    "esp-println?/esp32",
    "esp-wifi?/esp32",
    "esp-mbedtls/esp32",
]
esp32c3 = [
    "esp-hal?/esp32c3",
    "esp-hal-embassy?/esp32c3",
    "esp-backtrace?/esp32c3",
    "esp-println?/esp32c3",
    "esp-wifi?/esp32c3",
    "esp-mbedtls/esp32c3",
]
esp32s2 = [
    "esp-hal?/esp32s2",
    "esp-hal-embassy?/esp32s2",
    "esp-backtrace?/esp32s2",
    "esp-println?/esp32s2",
    "esp-wifi?/esp32s2",
    "esp-mbedtls/esp32s2",
]
esp32s3 = [
    "esp-hal?/esp32s3",
    "esp-hal-embassy?/esp32s3",
    "esp-backtrace?/esp32s3",
    "esp-println?/esp32s3",
    "esp-wifi?/esp32s3",
    "esp-mbedtls/esp32s3",
]

[build-dependencies]
embuild = { version = "0.33", features = ["espidf"] }
